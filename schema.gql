type User @collection(name: "users") {
  username: String!
  email: String!
  shelves: [Shelf] @relation
}

type Shelf @collection(name: "shelves") {
  title: String!
  key: String!
  owner: User! @relation
  books: [Book] @relation
}

type Book @collection(name: "books") {
  googleBookId: ID!
  volumeInfo: BookSourceVolumeInfo!
  shelves: [Shelf] @relation
  reviews: [Review] @relation
  ratingAverage: Float
  ratingTotal: Int
}

type Review @collection(name: "reviews") {
  book: Book! @relation
  stars: Int!
  commentary: String
  author: User! @relation
}

input ReviewInput {
  stars: Int!
  commentary: String
}

type BookSourceVolumeInfo @embedded {
  title: String!
  authors: [String!]!
  publisher: String!
  description: String!
  imageLinks: BookSourceImageLinks
}

type BookSourceImageLinks @embedded {
  smallThumbnail: String
  thumbnail: String
}

type AddBookToShelfResponse @embedded {
  ts: Long!
}

type Query {
  me: User! @resolver(name: "fetch_me")
  findShelvesByBookAndUser(bookID: ID!, userID: ID!): [Shelf]!
    @resolver(name: "find_shelves_by_book_and_user", paginated: true)
}

type Mutation {
  createReview(bookID: ID!, review: ReviewInput!): Review!
    @resolver(name: "submit_review")
  addBookToShelf(bookID: ID!, shelfID: ID!): AddBookToShelfResponse!
    @resolver(name: "add_book_to_shelf")
}
